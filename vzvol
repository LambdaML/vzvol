#!/bin/sh
set -e
set -x

ZUSER=$( whoami )
SIZE=10G
VOLNAME=DIE
FSTYPE=DIE
errorfunc=MAIN
IMPORTIMG=DIE
VZVOL_PROGRESS_FLAG=NO
NO_CREATE=NO

case "$( uname -s )" in
	FreeBSD)
		if pkg info | grep -q sudo; then
			VZVOL_SU_CMD="sudo"
		else
			VZVOL_SU_CMD="su - root -c"
		fi
	;;
	Linux)
		VZVOL_SU_CMD="sudo"
	;;
esac

if [ "$(zpool list | awk '{ zPools[NR-1]=$1 } END { print zPools[1] }')" = bootpool ]; then
	ZROOT=$(zpool list | awk '{ zPools[NR-1]=$1 } END { print zPools[2] }')
else
	ZROOT=$(zpool list | awk '{ zPools[NR-1]=$1 } END { print zPools[1] }')
fi

show_help() {
	errorfunc='show_help'
	cat << 'EOT'
	
virtbox-zvol is a shell script designed to help automate the process of 
creating a ZFS zvol for use as a storage unit for virtualization, or testing.
vzvol was originally created to allow you to back a light .VMDK with a zvol for 
use with VirtualBox, however additional functionality has been added over time 
to make vzvol a general-use program. I hope you find it useful!

This script is released under the 2-clause BSD license.
(c) 2017 RainbowHackerHorse

https://github.com/RainbowHackerHorse/vzvol

-h | --help
Shows this help

zvol Creation Flags:

-s | --size
Allows you to set a size for the zvol.
Size should be set using M or G.
Example: --size 10G | -s 1024M
Defaults to 10G if nothing specified.

-u | --user
Sets the user under which we grant permissions for the zvol.
Defaults to your username if nothing is specified.

-v | --volume
MANDATORY OPTION!!
Sets the zvol name. If nothing is specified or this option is left off,
the command will FAIL!

-p | --pool
This flag will allow you to override the logic to choose the zpool you want
your zvol on.
By default, this script selects the first zpool available, unless your 
first pool is "bootpool" (as with an encrypted system).
If your first pool is "bootpool", this script will default to the second
listed pool, usually "zroot" in a default install.

-t | --type
This option allows you to set the disk type behavior.
The following types are accepted:
-t virtualbox
- The default behavior, vzvol will create a shim VMDK to point to 
the created zvol.

-t raw
- Create a raw, normal zvol with no shim, in the default location of 
/dev/zvol/poolname/volumename
--file-system
Setting this flag allows you to format the zvol with your choice of filesystem.
The default for vzvol is to not create a filesystem on the new zvol.
The following types are accepted:
Filesystems with support in FreeBSD:
zfs 		- Creates a zfs filesystem, using the name set in --volume
ufs 		- Create a FreeBSD compatible UFS2 filesystem.
fat32		- Create an MS-DOS compatible FAT32 filesystem.

Filesystems that require a port be installed:
*REQUIRES* sysutils/e2fsprogs!
ext2		- Creates a Linux-compatible ext2 filesystem.
ext3		- Creates a Linux-compatible ext3 filesystem. 	
ext4		- Creates a Linux-compatible ext4 filesystem. 	
*REQUIRES* sysutils/xfsprogs!
xfs 		- Create an XFS filesystem. 

--import 
The --import flag allows you to import the contents of a downloaded disk image 
to your newly created zvol. This is useful when using a pre-installed VM image, 
such as https://github.com/RainbowHackerHorse/FreeBSD-On-Linode 

-p
The -p flag is used with --import to show a progress bar for image data 
importation to the vzol. -p requires that sysutils/pv be installed.
On Linux, this option requires you to have dialog installed.

zvol Management Flags:

--format
The --format flag allows you to reformat a zvol created by vzvol, using the same 
options and arguments as --file-system.
You must specify the fs type, and then the zvol to format.
Example: vzvol --format xfs zroot/smartos

--delete
The --delete flag deletes the zvol you specify. If a .VMDK file is associated 
with the zvol, the .VMDK will also be deleted.
You MUST specify the zpool the zvol resides on.
You can get this information from running vzvol --list or zfs list -t volume
Example: vzvol --delete zroot/smartos11

--list
List all zvols on your system, the type, any associated .VMDK files, how much 
space on disk is used by the zvol, the maximum size of the zvol capacity, and 
the Filesystem, if vzvol can determine it. Imported images will list FS as 
"imported", and any zvol that does not have custom:fs set will report "unknown".
Example output:
ZVOL              TYPE     VMDK                          USED   SIZE  FS
zroot/smartos     RAW      none                          20G    50G   zfs
zroot/ubuntu  VirtualBox  /home/u/VBoxDisks/ubuntu.vmdk  1.51G  10G   ext4
	
	
EOT
}

# Script Maintainence Functions
error_code() {
	echo "Error occurred in function $errorfunc"
	echo "Exiting"
	exit 1
}
getargz() {
	errorfunc='getargz'
	while :; do
		case $1 in
			-h|--help)
				show_help
				exit
			;;
			-s|--size)
				if [ "$2" ]; then
					SIZE="${2}"
					# Add input check to ensure proper syntax
					shift
				else
					echo "Please provide a size!"
					return 1
				fi
			;;
			-u|--user)
				if [ "$2" ]; then
					ZUSER="${2}"
					# Add input check to ensure proper syntax
					shift
				else
					echo "Please provide a username!"
					return 1
				fi
			;;
			-v|--volume)
				if [ "$2" ]; then
					VOLNAME="${2}"
					# Add input check to ensure proper syntax
					shift
				else
					echo "Please provide a zvol name!"
					return 1
				fi
			;;
			-p|--pool)
				if [ "$2" ]; then
					ZROOT="${2}"
					shift
				else
					echo "Please provide a pool name!"
					return 1
				fi
			;;
			-t|--type)
				if [ "$2" ]; then
					VOLTYPE="${2}"
					if [ "$VOLTYPE" != "raw" -a "$VOLTYPE" != "virtualbox" ]; then
						echo "Error. Invalid type $VOLTYPE selected!"
						return 1
					fi
					shift
				else
					echo "Type not specified!"
					return 1
				fi
			;;
			--file-system)
				if [ "$2" ]; then
					if [ ! "${IMPORTIMG}" = "DIE" ]; then
						echo "--file-system is incompatible with --import."
						return 1
					fi
					FSTYPE="${2}"
					vzvol_fscheck "${FSTYPE}"
					FORMAT_ME="${ZROOT}/${VOLNAME}"
				fi
				shift
			;;
			--import)
				if [ ! "${FSTYPE}" = "DIE" ]; then
						echo "--import is incompatible with --file-system."
						return 1
				fi
				if [ "$2" ]; then
					if [ ! -f "${2}" ]; then
						echo "Error. ${2} does not exist or has incorrect permissions, and can not be imported"
						return 1
					fi
					IMPORTIMG="${2}"
				fi
				shift
			;;
			-p)
				if pkg info | grep -vq pv; then
					echo "Error! You need to install sysutils/pv first, or don't use -p"
					return 1
				fi
				VZVOL_PROGRESS_FLAG="YES"
				shift
			;;
			--delete)
				if [ $( zfs list -t volume | awk '{print $1}' | grep -v "NAME" | grep -vq "${2}" ) ]; then
					echo "Error, zvol ${2} does not exist."
					echo "Try running vzvol --list or zfs list -t volume to see the available zvols on the system."
					return 1
				else
					DELETE_ME="${2}"
					DELETE_VMDK="${HOME}/VBoxDisks/${2}.vmdk"
					vzvol_delete || exit 1
					exit
				fi
			;;
			--list)
				vzvol_list
				exit
			;;
			--format)
				( zfs list -t volume | awk '{print $1}' | grep -v "NAME" | grep -q "${3}" )
				if [ $? = 1 ]; then
					echo "Error, zvol ${3} does not exist."
					echo "Try running vzvol --list or zfs list -t volume to see the available zvols on the system."
					return 1
				else
					if [ ! "$3" ]; then
						echo "Error, please select a zvol to format"
						return 1
					else
						FSTYPE="${2}"
						FORMAT_ME="${3}"
						VOLNAME="${FORMAT_ME}"
						vzvol_fscheck
						zvol_fs_type || exit 1
						exit
					fi
				fi
			;;
			*)
				break
		esac
		shift
	done
}

# Display Data
vzvol_list() {
	vzvol_pre_list
	if [ $? = 2 ]; then
		echo "Error: no zvols configured"
		echo "Why not try creating one?"
		echo "It's as easy as: vzvol -t raw -v volumename"
		exit 1
	fi
	vzvol_pre_list
	if [ $? = 0 ]; then
		(printf "ZVOL TYPE VMDK USED SIZE FS \n" \
		; vzvol_list_type) | column -t
	else
		echo "Error acquiring zvol list"
		return 1
	fi
}
vzvol_pre_list(){
	(zfs list -t volume 2>&1 >/dev/null | grep -q "no datasets available")
	if [ $? = 1 ]; then
		return 0
	else 
		return 2
	fi
}
vzvol_list_type() {
	list_my_vols=$( zfs list -t volume | awk '!/NAME/ {print $1}' )
	if [ "$list_my_vols" = "no" ]; then
		echo "Error, No zvols Configured"
		return 2
	fi
	for vols in $list_my_vols; do
		purevolname=$( echo $vols | awk -F "/" '{print $2}' )
		purevolused=$( zfs get referenced $vols | awk '!/VALUE/ {print $3}' )
		purevolsize=$( zfs get used $vols | awk '!/VALUE/ {print $3}' )
		if zfs get custom:fs $vols 2>/dev/null | grep -q fs; then
			zvolfstype=$( zfs get custom:fs $vols | awk '!/VALUE/ {print $3}' )
		else
			zvolfstype="unknown"
		fi
		if [ -f "${HOME}/VBoxdisks/${purevolname}.vmdk" ]; then
			echo "${vols} VirtualBox ${HOME}/VBoxdisks/${purevolname}.vmdk $purevolused $purevolsize $zvolfstype"
		else
			echo "${vols} RAW none $purevolused $purevolsize $zvolfstype"
		fi
	done
	return 0
}

# File Creation and Deletion
vmdk_create() {
	errorfunc='vmdk_create'
	if [ ! -d /home/"${ZUSER}"/VBoxdisks/ ]; then
		mkdir -p /home/"${ZUSER}"/VBoxdisks/
	fi
	if [ ! -e /home/"${ZUSER}"/VBoxdisks/"${VOLNAME}".vmdk ]; then
		echo "Creating /home/${ZUSER}/VBoxdisks/${VOLNAME}.vmdk"
		sleep 3
		VBoxManage internalcommands createrawvmdk \
		-filename /home/"${ZUSER}"/VBoxdisks/"${VOLNAME}".vmdk \
		-rawdisk /dev/zvol/"${ZROOT}/${VOLNAME}"
	else
		echo "/home/${ZUSER}/VBoxdisks/${VOLNAME}.vmdk" already exists.
		return 1
	fi
}
zvol_create() {
	errorfunc='zvol_create'
	if [ ! -e /dev/zvol/"${ZROOT}/${VOLNAME}" ]; then
		if [ "${ZUSER}" = root ]; then
			zfs create -V "${SIZE}" "${ZROOT}/${VOLNAME}"
		else
			"${VZVOL_SU_CMD}" zfs create -V "${SIZE}" "${ZROOT}/${VOLNAME}"
		fi
	fi
	ZVOL_NAME=/dev/zvol/"${ZROOT}/${VOLNAME}"
	echo "Testing to ensure zvol was created"
	if [ ! -f "${ZVOL_NAME}" ]; then
		if [ -L "${ZVOL_NAME}" ]; then
			ZVOL_NAME=/dev/$( file "${ZVOL_NAME}" | awk -F "/" '{print $7}' )
		else
			echo "Error. ${ZVOL_NAME} not found"
			return 1
		fi
	fi
	if [ "${ZUSER}" = root ]; then
		chown "${ZUSER}" "${ZVOL_NAME}"
		( echo "own	zvol/${ZROOT}/${VOLNAME}	${ZUSER}:operator" | tee -a /etc/devfs.conf ) > /dev/null 2>&1
	else
		"$VZVOL_SU_CMD" chown "${ZUSER}" "${ZVOL_NAME}"
		( echo "own	zvol/${ZROOT}/${VOLNAME}	${ZUSER}:operator" | "$VZVOL_SU_CMD" tee -a /etc/devfs.conf ) > /dev/null 2>&1
	fi
	"$VZVOL_SU_CMD" zfs set custom:fs=none "${ZROOT}/${VOLNAME}"
	if [ ! "${FSTYPE}" = DIE ]; then
		zvol_fs_type || return 1
	fi
	if [ ! "${IMPORTIMG}" = DIE ]; then
		zvol_import_img || return 1
	fi
}
vzvol_delete() {
	errorfunc='vzvol_delete'
	echo "WARNING!"
	echo "This will DESTROY ${DELETE_ME}"
	echo "Unless you have a snapshot of this zvol,"
	echo "ALL DATA WILL BE DELETED AND UNRECOVERABLE!"
	read -p "Do you want to continue? [y/N]?" line </dev/tty
	case "$line" in
		y)
			echo "Deleting ${DELETE_ME}"
			"$VZVOL_SU_CMD" zfs destroy "${DELETE_ME}"
			if [ -f "${DELETE_VMDK}" ]; then
				rm -f "${DELETE_VMDK}"
			fi
		;;
		*)
			echo "Deletion cancelled!"
			return 1
		;;
	esac
}

# Data Management
zvol_import_img() {
	errorfunc='zvol_import_img'
	ZVOL_IMPORT=/dev/zvol/"${ZROOT}/${VOLNAME}"
	echo "Testing to ensure zvol exists"
	if [ ! -f "${ZVOL_IMPORT}" ]; then
		if [ -L "${ZVOL_IMPORT}" ]; then
			ZVOL_IMPORT=/dev/$( file "${ZVOL_IMPORT}" | awk -F "/" '{print $7}' )
		else
			echo "Error. ${ZVOL_IMPORT} not found"
			return 1
		fi
	fi
	if [ "${VZVOL_PROGRESS_FLAG}" = "YES" ]; then
		VZVOL_IMPORT_CMD="( pv -n ${IMPORTIMG} | of=${ZVOL_IMPORT} )2>&1 | dialog --gauge 'Importing...' 10 70 0"
	else
		case "$( uname -s )" in
			FreeBSD)
				VZVOL_IMPORT_CMD="dd if=${IMPORTIMG} of=${ZVOL_IMPORT}"
			;;
			Linux)
				VZVOL_IMPORT_CMD="dd if=${IMPORTIMG} of=${ZVOL_IMPORT} status=progress"
			;;
		esac
	fi
	echo "Now importing ${IMPORTIMG} to ${ZVOL_IMPORT}"
	echo "This will DESTROY all data on ${ZVOL_IMPORT}"
	read -p "Do you want to continue? [y/N]?" line </dev/tty
	case "$line" in
		y)
			echo "Beginning import..."
			"$VZVOL_SU_CMD" zfs set custom:fs=imported "${ZROOT}/${VOLNAME}"
			eval "$VZVOL_IMPORT_CMD"
		;;
		*)
			echo "Import cancelled!"
			return 1
		;;
	esac
}

# Checks
zvol_check() {
	errorfunc='zvol_check'
	if [ "${VOLNAME}" = 'DIE' ]; then
		echo "Please provide a zvol name. See --help for more information."
		return 1
	fi
	(zfs list -t volume 2>&1 >/dev/null | grep -q "${ZROOT}/${VOLNAME}")
	if [ $? = 0 ]; then
		"$NO_CREATE" = "YES"
	fi
}

vzvol_fscheck() {
	if [ "${FSTYPE}" != "zfs" -a "${FSTYPE}" != "ufs" -a "${FSTYPE}" != "fat32" -a "${FSTYPE}" != "ext2" -a "${FSTYPE}" != "ext3" -a "${FSTYPE}" != "ext4" -a "${FSTYPE}" != "xfs" ]; then
		echo "Error. Invalid filesystem ${FSTYPE} selected!"
		return 1
	fi
}
vzvol_pkg_check_freebsd(){
	if [ "${FSTYPE}" = "ext2" -o "${FSTYPE}" = "ext3" -o "${FSTYPE}" = "ext4" -o "${FSTYPE}" = "xfs" ]; then
		echo "Warning. You have selected an FS type supplied by a port. Now checking to see if the port is installed."
		echo "Please note that unsupported FSes may exhibit unexpected behavior!"
		if [ "${FSTYPE}" = "ext2" -o "${FSTYPE}" = "ext3" -o "${FSTYPE}" = "ext4" ]; then
			pkg info | grep -q e2fsprogs
			if [ ! $? = 0 ]; then
				echo "Error! You need to install sysutils/e2fsprogs first!"
				return 1
			fi
		elif [ "${FSTYPE}" = "xfs" ]; then
			pkg info | grep -q xfsprogs
			if [ ! $? = 0 ]; then
				echo "Error! You need to install sysutils/xfsprogs first!"
				return 1
			fi
		fi
	fi
}
vzvol_pkg_check_linux(){
	ls /usr/bin | grep -q lsb_release
	if [ $? = 0 ]; then
		vzvol_pkg_lsb
	else
		vzvol_pkg_distrocheck
	fi
}
vzvol_pkg_lsb() {
	case "$( lsb_release -i | awk '{print $3}' )" in
		Ubuntu)
			vzvol_pkg_DEB
		;;
		Debian)
			vzvol_pkg_DEB
		;;
	esac
}
vzvol_pkg_distrocheck() {
	if grep -q "Arch" /etc/*-release; then
		vzvol_pkg_Arch
	elif grep -q "CentOS" /etc/*-release; then
		vzvol_pkg_RHEL
	elif grep -q "Red Hat Enterprise Linux" /etc/*-release; then
		vzvol_pkg_RHEL
	else
		echo "Fatal Error"
		echo "vzvol doesn't support your distribution at this time."
		echo "vzvol currently supports:"
		echo "The FreeBSD Operating System, Arch Linux,"
		echo "Debian Linux, Ubuntu Linux, CentOS Enterprise Linux, and"
		echo "Red Hat Enterprise Linux."
		exit 1
	fi
}
vzvol_pkg_DEB() {
	if [ "${FSTYPE}" = "xfs" ]; then
		dpkg -l | grep -q xfsprogs
		if [ ! $? = 0 ]; then
			echo "Error! You need to install xfsprogs first!"
			echo "Run apt-get install xfsprogs"
			return 1
		fi
	fi
	if [ "${FSTYPE}" = "fat32" ]; then
		dpkg -l | grep -q dosfstools
		if [ ! $? = 0 ]; then
			echo "Error! You need to install dosfstools first!"
			echo "Run apt-get install dosfstools"
			return 1
		fi
	fi
}
vzvol_pkg_Arch() {
	if [ "${FSTYPE}" = "xfs" ]; then
		pacman -Q | grep -q xfsprogs
		if [ ! $? = 0 ]; then
			echo "Error! You need to install xfsprogs first!"
			echo "Run pacman -Sy xfsprogs"
			return 1
		fi
	fi
	if [ "${FSTYPE}" = "fat32" ]; then
		pacman -Q | grep -q dosfstools
		if [ ! $? = 0 ]; then
			echo "Error! You need to install dosfstools first!"
			echo "Run pacman -Sy dosfstools"
			return 1
		fi
	fi
}
vzvol_pkg_RHEL() {
	if [ "${FSTYPE}" = "xfs" ]; then
		rpm -qa | grep -q xfsprogs
		if [ ! $? = 0 ]; then
			echo "Error! You need to install xfsprogs first!"
			echo "Run yum install xfsprogs"
			return 1
		fi
	fi
	if [ "${FSTYPE}" = "fat32" ]; then
		rpm -qa | grep -q dosfstools
		if [ ! $? = 0 ]; then
			echo "Error! You need to install dosfstools first!"
			echo "Run yum install dosfstools"
			return 1
		fi
	fi
}
zvol_fs_type() {
	errorfunc='zvol_fs_type'
	case "$( uname -s )" in
		FreeBSD)
			vzvol_pkg_check_freebsd || return 1
		;;
		Linux)
			vzvol_pkg_check_linux || return 1
		;;
	esac	
	echo "Now formatting /dev/zvol/${FORMAT_ME} as ${FSTYPE}"
	echo "This will DESTROY all data on /dev/zvol/${FORMAT_ME}"
	read -p "Do you want to continue? [y/N]?" line </dev/tty
	case "$line" in
		y)
			echo "Beginning format..."
		;;
		*)
			echo "Format cancelled!"
			return 1
		;;
	esac
	"$VZVOL_SU_CMD" zfs set custom:fs="${FSTYPE}" "${FORMAT_ME}"
	case "${FSTYPE}" in
		zfs)
			zvol_create_fs_zfs
		;;
		ufs)
			zvol_create_fs_ufs
		;;
		fat32)
			zvol_create_fs_fat32
		;;
		ext2)
			zvol_create_fs_ext2
		;;
		ext3)
			zvol_create_fs_ext3
		;;
		ext4)
			zvol_create_fs_ext4
		;;
		xfs)
			zvol_create_fs_xfs
		;;
	esac
}

# Type Management
zvol_type_select() {
	errorfunc='zvol_type_select'
	if [ "$VOLTYPE" = raw ]; then
		zvol_type_raw
	elif [ "$VOLTYPE" = virtualbox ]; then
		zvol_type_virtualbox
	fi
}
zvol_type_virtualbox() {
	errorfunc='zvol_type_virtualbox'
	zvol_create || return 1
	vmdk_create || return 1
	echo "Please use /home/${ZUSER}/VBoxdisks/${VOLNAME}.vmdk as your VM Disk"
}
zvol_type_raw() {
	errorfunc='zvol_type_raw'
	zvol_create || return 1
	echo "You can find your zvol at: /dev/zvol/${ZROOT}/${VOLNAME}"
}

# zvol Format Functions
zvol_create_fs_zfs() {
	errorfunc='zvol_create_fs_zfs'
	echo "Creating ZFS Filesystem on /dev/zvol/${FORMAT_ME}"
	zpool create "${VOLNAME}" /dev/zvol/"${FORMAT_ME}" || return 1
}
zvol_create_fs_ufs() {
	errorfunc='zvol_create_fs_ufs'
	echo "Creating UFS Filesystem on /dev/zvol/${FORMAT_ME}"
	newfs -E -J -O 2 -U /dev/zvol/"${FORMAT_ME}" || return 1
}
zvol_create_fs_fat32() {
	errorfunc='zvol_create_fs_fat32'
	echo "Creating FAT32 Filesystem on /dev/zvol/${FORMAT_ME}"
	case "$( uname -s )" in
		FreeBSD)
			zvol_create_fs_fat32_freebsd -F32 /dev/zvol/"${FORMAT_ME}" || return 1
		;;
		Linux)
			zvol_create_fs_fat32_linux -F32 /dev/zvol/"${FORMAT_ME}" || return 1
		;;
	esac	
}
zvol_create_fs_fat32_freebsd() {
	newfs_msdos "$@"
}
zvol_create_fs_fat32_linux() {
	mkfs.fat "$@"
}
zvol_create_fs_ext2() {
	errorfunc='zvol_create_fs_ext2'
	echo "Creating ext2 Filesystem on /dev/zvol/${FORMAT_ME}"
	mke2fs -t ext2 /dev/zvol/"${FORMAT_ME}" || return 1
}
zvol_create_fs_ext3() {
	errorfunc='zvol_create_fs_ext3'
	echo "Creating ext3 Filesystem on /dev/zvol/${FORMAT_ME}"
	mke2fs -t ext3 /dev/zvol/"${FORMAT_ME}" || return 1
}
zvol_create_fs_ext4() {
	errorfunc='zvol_create_fs_ext4'
	echo "Creating ext4 Filesystem on /dev/zvol/${FORMAT_ME}"
	mke2fs -t ext4 /dev/zvol/"${FORMAT_ME}" || return 1
}
zvol_create_fs_xfs() {
	errorfunc='zvol_create_fs_xfs'
	echo "Creating XFS Filesystem on /dev/zvol/${FORMAT_ME}"
	mkfs.xfs /dev/zvol/"${FORMAT_ME}" || return 1
}

getargz "$@" || error_code
zvol_check || error_code
if [ "$NO_CREATE" = "YES" ]; then 
	if [ ! "${IMPORTIMG}" = DIE ]; then
		zvol_import_img || return 1
	fi
else
	zvol_type_select || error_code
fi
exit 0
